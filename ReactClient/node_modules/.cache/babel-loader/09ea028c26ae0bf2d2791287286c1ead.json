{"ast":null,"code":"import axios from 'axios';\n\nclass Transactions {\n  constructor() {\n    this.setPassword = password => {\n      console.log(\"Setpassword --- \" + this.password);\n      this.password = password;\n    };\n\n    this.login = (username, password) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"login\", {\n          username: username,\n          password: password\n        }).then(res => {\n          if (res.data.error) {\n            this.err = res.data.error;\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            this.authenticated = true;\n            this.token = res.data.token;\n            this.user = res.data.user;\n            console.log(\"The userid is --> \" + res.data.user);\n            localStorage.setItem(\"token\", res.data.token);\n            localStorage.setItem(\"userid\", res.data.user);\n            console.log(res);\n            resolve({\n              authenticated: true,\n              data: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the log in function \");\n      });\n    };\n\n    this.signup = (name, email, password) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"signup\", {\n          username: email,\n          password: password\n        }).then(res => {\n          if (res.data.error) {\n            this.err = res.data.error;\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            this.authenticated = true;\n            this.token = res.data.token;\n            this.user = res.data.user;\n            localStorage.setItem(\"token\", res.data.token);\n            console.log(res);\n            resolve({\n              authenticated: true,\n              data: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err.data);\n          reject();\n        });\n        console.log(\"We have run the log in function \");\n      });\n    };\n\n    this.logout = () => {\n      console.log(\"Logging out...\");\n      this.authenticated = false;\n    };\n\n    this.isAuthenticated = () => {\n      return this.authenticated;\n    };\n\n    this.err = \"\";\n    this.authenticated = false;\n    this.token = \"\";\n    this.user = \"\";\n    this.login = this.login.bind(this);\n    this.setPassword = this.setPassword.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n}\n\nexport default new Transactions();","map":{"version":3,"sources":["/Users/mark/Desktop/Projects/StockTradingApp/ReactClient/src/Helper/auth.js"],"names":["axios","Transactions","constructor","setPassword","password","console","log","login","username","Promise","resolve","reject","post","then","res","data","error","err","authenticated","token","user","localStorage","setItem","catch","signup","name","email","logout","isAuthenticated","bind"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\n\n\nclass Transactions{\n\n    constructor(){\n\n\n        this.err = \"\";\n        this.authenticated = false;\n        this.token = \"\";\n        this.user = \"\";\n\n\n\n        this.login = this.login.bind(this)\n        this.setPassword = this.setPassword.bind(this)\n        this.logout = this.logout.bind(this)\n        this.isAuthenticated = this.isAuthenticated.bind(this)\n\n    }\n\n\n\n    setPassword = (password) => {\n        console.log(\"Setpassword --- \" + this.password)\n        this.password = password\n    }\n\n    login = (username, password) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"login\", { username: username, password: password }).then( res => {\n            \n                if(res.data.error){\n\n                    this.err = res.data.error\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    this.authenticated = true;\n                    this.token = res.data.token;\n                    this.user = res.data.user;\n                    console.log(\"The userid is --> \" + res.data.user)\n\n                    localStorage.setItem(\"token\", res.data.token);\n                    localStorage.setItem(\"userid\", res.data.user);\n\n                    console.log(res);\n                    resolve({\n                        authenticated: true,\n                        data: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the log in function \")\n\n        })\n        \n    }\n\n    signup = (name, email , password) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"signup\", { username: email, password: password }).then( res => {\n            \n                if(res.data.error){\n\n                    this.err = res.data.error\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    this.authenticated = true;\n                    this.token = res.data.token;\n                    this.user = res.data.user;\n\n                    localStorage.setItem(\"token\", res.data.token);\n\n                    console.log(res);\n                    resolve({\n                        authenticated: true,\n                        data: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err.data)\n                reject()\n            })\n    \n            console.log(\"We have run the log in function \")\n\n        })\n        \n    }\n\n\n\n    logout = () => {\n        console.log(\"Logging out...\")\n        this.authenticated = false\n    }\n\n    isAuthenticated = () => {\n        return this.authenticated\n    }\n}\n\nexport default new Transactions();"]},"metadata":{},"sourceType":"module"}