{"ast":null,"code":"var _jsxFileName = \"/Users/mark/Desktop/Projects/StockTradingApp/ReactClient/src/Components/Order/order.js\";\nimport React, { Component } from 'react';\nimport transaction from '../../Helper/transaction';\nimport './order.css'; //2 types of orders - triggered and market\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Order extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      this.setState({\n        [nam]: val\n      });\n\n      if (event.target.value === \"triggered\") {\n        this.setState({\n          triggered: true\n        });\n      }\n\n      if (event.target.value === \"market\") {\n        this.setState({\n          triggered: false\n        });\n      }\n    };\n\n    this.makeOrder = event => {\n      event.preventDefault();\n      console.log(\"making an order\");\n      console.log(event.target.name); //do not submit form if no amount has been input\n\n      if (!this.state.amount) {\n        return;\n      }\n\n      if (event.target.name === \"Buy\" || this.props.ordertype === \"Sell\") {\n        if (!this.state.triggered) {\n          //regular buy\n          if (event.target.name === \"Buy\") {\n            transaction.buy(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount).then(response => {\n              //allow commit buy only after completing buy successfully\n              if (response.data) {\n                if (response.data.status === \"passed\") {\n                  this.setState({\n                    error: \"\",\n                    orderConfirmation: true\n                  });\n                }\n              } else if (response.error) {\n                this.setState({\n                  error: response.error\n                });\n              }\n            });\n          } else {\n            //regular sell\n            transaction.sell(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount).then(response => {\n              //allow commit sell only after completing buy successfully\n              if (response.data.status === \"passed\") {\n                this.setState({\n                  orderConfirmation: true\n                });\n              }\n            });\n          }\n        } else {\n          //triggered buy\n          if (event.target.name === \"Buy\") {\n            transaction.setBuy(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount, this.state.triggerVal).then(response => {});\n          } //triggered sell\n          else {\n            transaction.setSell(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount, this.state.triggerVal).then(response => {});\n          }\n        }\n\n        return;\n      }\n\n      if (event.target.name === \"Commit Buy\" || event.target.name === \"Commit Sell\") {\n        //commit last buy transaction\n        if (event.target.name === \"Commit Buy\") {\n          transaction.commitBuy(localStorage.getItem(\"userid\")).then(response => {\n            console.log(\"Commit buy response is == \", response);\n\n            if (response.data.status) {\n              this.props.orderCompleted();\n            } else if (response.data.error) {\n              this.props.orderCompleted(response.data.error);\n            }\n          });\n        } //commit last sell transaction\n        else {\n          transaction.commitSell(localStorage.getItem(\"userid\")).then(response => {\n            if (response.data.status === \"passed\") {\n              this.setState({\n                orderConfirmation: true\n              });\n            }\n          });\n        }\n\n        return;\n      }\n\n      if (event.target.name === \"Cancel Buy\" || event.target.name === \"Cancel Sell\") {\n        if (this.state.triggered) {\n          //cancel last set buy\n          if (event.target.name === \"Cancel Buy\") {\n            transaction.cancelSetBuy(localStorage.getItem(\"userid\"), this.props.stockname).then(response => {\n              console.log(response);\n\n              if (response.data) {\n                if (response.data.status === \"passed\") {\n                  this.setState({\n                    error: \"\",\n                    orderConfirmation: true\n                  });\n                }\n              } else if (response.error) {\n                this.setState({\n                  error: response.error\n                });\n              }\n            });\n          } //cancel last set sell\n          else {\n            transaction.cancelSetSell(localStorage.getItem(\"userid\"), this.props.stockname).then(response => {\n              if (response.data.status === \"passed\") {\n                this.setState({\n                  orderConfirmation: true\n                });\n              }\n            });\n          }\n        } else if (!this.state.triggered) {\n          if (event.target.name === \"Cancel Buy\") {\n            transaction.cancelBuy(localStorage.getItem(\"userid\")).then(response => {\n              console.log(response);\n\n              if (response.data) {\n                if (response.data.status === \"passed\") {\n                  this.props.orderCompleted();\n                }\n              } else if (response.error) {\n                this.setState({\n                  error: response.error\n                });\n              }\n            });\n          } else {\n            transaction.cancelSell(localStorage.getItem(\"userid\")).then(response => {\n              if (response.data.status === \"passed\") {\n                this.setState({\n                  orderConfirmation: true\n                });\n              }\n            });\n          }\n        }\n\n        return;\n      }\n    };\n\n    this.state = {\n      ordertype: \"\",\n      triggered: false,\n      orderCompleted: false,\n      error: \"\",\n      orderConfirmation: false\n    };\n  }\n\n  render() {\n    let button;\n    let confirmButtons;\n    let cancelButtonName = \"Cancel \" + this.props.ordertype;\n    let commitButtonName = \"Commit \" + this.props.ordertype;\n    button = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Order-submitBtn\",\n      name: this.props.ordertype,\n      onClick: this.makeOrder,\n      type: \"button\",\n      children: [\"  \", this.state.triggered ? \"Set\" : \"\", \" \", this.props.ordertype, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 18\n    }, this);\n    confirmButtons = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnContainer\",\n      children: [!this.state.triggered && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Order-submitBtn\",\n        name: commitButtonName,\n        type: \"button\",\n        onClick: this.makeOrder,\n        children: [\"Commit \", this.props.ordertype]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Order-cancelBtn\",\n        name: cancelButtonName,\n        type: \"button\",\n        onClick: this.makeOrder,\n        children: [\"Cancel \", this.state.triggered ? \"Set\" : \"\", \" \", this.props.ordertype]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 26\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Order\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"Order-header\",\n        children: \"Place an order.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Order-descriptioncontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Order-stockname\",\n          children: this.props.stockname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), this.props.stockprice && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Order-stockprice\",\n          children: [this.props.stockprice, \" $\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), this.props.amountowned && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"Order-label\",\n            children: \"Amount owned\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"Order-stockprice\",\n            children: [this.props.stockprice, \" $\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Order-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Order-label\",\n          children: [this.props.ordertype, \" type \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"Order-dropdown\",\n          name: \"order type\",\n          id: \"ordertype\",\n          onChange: this.handleChange,\n          disabled: this.state.orderConfirmation,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"market\",\n            children: [\"Market \", this.props.ordertype]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"triggered\",\n            children: [\"Set \", this.props.ordertype, \" Trigger\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Order-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"Order-label\",\n            children: [this.props.ordertype, \" amount \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"Order-input\",\n            name: \"amount\",\n            type: \"number\",\n            min: \"1\",\n            onChange: this.handleChange,\n            readOnly: this.state.orderConfirmation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this), this.state.triggered && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Order-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"Order-label\",\n            children: [this.props.ordertype, \" trigger  \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"Order-input\",\n            name: \"triggerVal\",\n            type: \"number\",\n            min: \"1\",\n            readOnly: this.state.orderConfirmation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.orderConfirmation ? confirmButtons : button\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), this.state.error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Order;","map":{"version":3,"sources":["/Users/mark/Desktop/Projects/StockTradingApp/ReactClient/src/Components/Order/order.js"],"names":["React","Component","transaction","Order","constructor","handleChange","event","nam","target","name","val","value","setState","triggered","makeOrder","preventDefault","console","log","state","amount","props","ordertype","buy","localStorage","getItem","stockname","then","response","data","status","error","orderConfirmation","sell","setBuy","triggerVal","setSell","commitBuy","orderCompleted","commitSell","cancelSetBuy","cancelSetSell","cancelBuy","cancelSell","render","button","confirmButtons","cancelButtonName","commitButtonName","stockprice","amountowned"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport transaction from '../../Helper/transaction';\nimport './order.css'\n\n\n//2 types of orders - triggered and market\nclass Order extends Component {\n\n    constructor(){\n        super()\n\n        this.state = {\n            ordertype : \"\",\n            triggered : false,\n            orderCompleted:false,\n            error: \"\",\n            orderConfirmation : false,\n        }\n\n\n    }\n\n    handleChange = (event) => {\n\n        let nam = event.target.name;\n        let val = event.target.value;\n        this.setState({[nam]: val});\n\n\n        if(event.target.value === \"triggered\"){\n            this.setState({\n                triggered: true\n            })\n        }\n        if(event.target.value === \"market\"){\n            this.setState({\n                triggered: false\n            })\n        }\n    }\n\n  \n    //TODO: make this less messy\n    makeOrder = (event) => {\n\n        event.preventDefault()\n        console.log(\"making an order\")\n        console.log(event.target.name)\n\n        //do not submit form if no amount has been input\n        if(!this.state.amount){\n            return\n        }\n        \n\n        if(event.target.name === \"Buy\" || this.props.ordertype === \"Sell\"){  \n\n            if(!this.state.triggered){\n                //regular buy\n                if(event.target.name === \"Buy\"){\n                    transaction.buy(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount).then((response) => {\n                        //allow commit buy only after completing buy successfully\n\n                        if(response.data){\n                            if(response.data.status === \"passed\"){\n                                this.setState({\n                                    error: \"\",\n                                    orderConfirmation: true\n                                })\n                            }\n                        }\n                        else if(response.error){\n                            this.setState({\n                                error: response.error\n                            })\n                        }\n\n                    })\n\n                } else{\n                    //regular sell\n                    transaction.sell(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount).then((response) => {\n                        //allow commit sell only after completing buy successfully\n                        if(response.data.status === \"passed\"){\n                            this.setState({\n                                orderConfirmation: true\n                            })\n                        }\n                    })\n                }\n            }\n            else{\n                //triggered buy\n                if(event.target.name === \"Buy\"){\n                    transaction.setBuy(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount, this.state.triggerVal).then((response) => {\n\n                    })\n                } \n                //triggered sell\n                else {\n                    transaction.setSell(localStorage.getItem(\"userid\"), this.props.stockname, this.state.amount, this.state.triggerVal).then((response) => {\n\n                    })\n                }\n            }\n            return\n        }\n\n        if(event.target.name === \"Commit Buy\" || event.target.name === \"Commit Sell\"){\n\n            //commit last buy transaction\n            if(event.target.name === \"Commit Buy\"){\n                transaction.commitBuy(localStorage.getItem(\"userid\")).then(response => {\n                    console.log(\"Commit buy response is == \", response)\n\n                    if(response.data.status){\n                        this.props.orderCompleted()\n                    }\n                    else if(response.data.error){\n                        this.props.orderCompleted(response.data.error)\n                    }\n\n                })\n            } \n            //commit last sell transaction\n            else{\n                transaction.commitSell(localStorage.getItem(\"userid\")).then(response => {\n                    if(response.data.status === \"passed\"){\n                        this.setState({\n                            orderConfirmation: true\n                        })\n                    }\n\n                })\n            }\n            return\n        }\n\n        if(event.target.name === \"Cancel Buy\" || event.target.name === \"Cancel Sell\"){\n\n            \n\n            if(this.state.triggered){\n                //cancel last set buy\n                if(event.target.name === \"Cancel Buy\"){ \n                    transaction.cancelSetBuy(localStorage.getItem(\"userid\"), this.props.stockname).then(response => {\n                        console.log(response)\n                        if(response.data){\n                            if(response.data.status === \"passed\"){\n                                this.setState({\n                                    error: \"\",\n                                    orderConfirmation: true\n                                })\n                            }\n                        }\n                        else if(response.error){\n                            this.setState({\n                                error: response.error\n                            })\n                        }\n                    })\n                }\n                //cancel last set sell\n                else{\n                    transaction.cancelSetSell(localStorage.getItem(\"userid\"), this.props.stockname).then(response => {\n                        if(response.data.status === \"passed\"){\n                            this.setState({\n                                orderConfirmation: true\n                            })\n                        }\n                    })\n                }\n            }\n            \n            else if (!this.state.triggered){\n                if(event.target.name === \"Cancel Buy\"){\n                    transaction.cancelBuy(localStorage.getItem(\"userid\")).then(response => {\n                        console.log(response)\n                        if(response.data){\n                            if(response.data.status === \"passed\"){\n                                this.props.orderCompleted()\n                            }\n                        }\n                        else if(response.error){\n                            this.setState({\n                                error: response.error\n                            })\n                        }\n                    })\n                }\n                else{\n                    transaction.cancelSell(localStorage.getItem(\"userid\")).then(response => {\n                        if(response.data.status === \"passed\"){\n                            this.setState({\n                                orderConfirmation: true\n                            })\n                        }\n                    })\n                }\n            }\n            return\n        }\n\n\n    }\n\n\n    render() {\n\n        let button;\n        let confirmButtons;\n        let cancelButtonName = \"Cancel \" + this.props.ordertype\n        let commitButtonName = \"Commit \" + this.props.ordertype\n\n        button = <button className=\"Order-submitBtn\" name = {this.props.ordertype} onClick={this.makeOrder} type = \"button\">  {this.state.triggered ? \"Set\" : \"\"} {this.props.ordertype} </button>\n\n        confirmButtons = <div className='btnContainer'>\n                            {!this.state.triggered && \n                                <button className=\"Order-submitBtn\" name = {commitButtonName} type=\"button\" onClick={this.makeOrder}>Commit {this.props.ordertype}</button>\n                            }\n                            <button className=\"Order-cancelBtn\" name = {cancelButtonName} type=\"button\" onClick={this.makeOrder}>Cancel {this.state.triggered ? \"Set\" : \"\"} {this.props.ordertype}</button>\n                        </div>\n\n\n\n        return (\n            <div className=\"Order\">\n\n                <h2 className=\"Order-header\">Place an order.</h2>\n\n                <div className=\"Order-descriptioncontainer\">\n\n                    <h3 className=\"Order-stockname\">{this.props.stockname}</h3>\n\n                {this.props.stockprice && \n                    <h3 className=\"Order-stockprice\">{this.props.stockprice} $</h3>\n                }\n\n                {this.props.amountowned && \n                    <>\n                        <label className=\"Order-label\">Amount owned</label>\n                        <h3 className=\"Order-stockprice\">{this.props.stockprice} $</h3>\n                    </>                \n                }\n                </div>\n\n                <div className=\"Order-container\">\n                    <label className=\"Order-label\">{this.props.ordertype} type </label>\n                    <select className=\"Order-dropdown\" name=\"order type\" id=\"ordertype\" onChange={this.handleChange} disabled={this.state.orderConfirmation}>\n                        <option value=\"market\">Market {this.props.ordertype}</option>\n                        <option value=\"triggered\">Set {this.props.ordertype} Trigger</option>\n                    </select>\n                </div>\n\n\n                <form className=\"\">\n\n                    <div className=\"Order-container\">\n                        <label className=\"Order-label\">{this.props.ordertype} amount </label>\n                        <input className=\"Order-input\" name=\"amount\" type=\"number\" min=\"1\" onChange={this.handleChange} readOnly={this.state.orderConfirmation}></input>\n                    </div>\n                        \n                    {this.state.triggered && \n                        <div className=\"Order-container\">\n                            <label className=\"Order-label\">{this.props.ordertype} trigger  </label>\n                            <input className=\"Order-input\" name=\"triggerVal\" type=\"number\" min=\"1\" readOnly={this.state.orderConfirmation} ></input>\n                        </div>\n                    }\n\n                    <div>\n                        {this.state.orderConfirmation ? confirmButtons : button }\n                    </div>\n\n                    {this.state.error}\n            \n                </form>\n\n            </div>\n        );\n\n    }\n  }\n  \n  export default Order;"]},"metadata":{},"sourceType":"module"}