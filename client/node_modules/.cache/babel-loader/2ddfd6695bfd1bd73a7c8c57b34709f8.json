{"ast":null,"code":"import axios from 'axios';\n\nclass Auth {\n  constructor() {\n    this.login = (username, password) => {\n      //this.setState({username: username, password: password})\n      axios.post(\"login\", {\n        username: username,\n        password: password\n      }).then(res => {\n        if (res.data.error) {\n          this.setState({\n            err: res.data.error\n          }, () => {\n            console.log(\"There is an error --> \" + this.state.err);\n          });\n          console.log(this.state.err);\n        } else {\n          localStorage.setItem(\"token\", res.data.token);\n          console.log(res);\n        }\n      }).catch(err => {});\n      /*\n      \n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({password : this.password})\n      };\n      try {\n          const response = await fetch('http://localhost:3002/login', requestOptions)\n          const data = await response.json()\n          if (data.outcome === 'match') {\n              this.authenticated = true\n          }\n          else if (data.outcome === 'no match') {\n               this.authenticated = false\n          }\n      }\n      catch (error) {\n          return (console.log(\"Error with the authentication : \" + error))\n      }\n      */\n\n      console.log(\"We have run the log in function \");\n    };\n\n    this.authenticated = false;\n    this.username = \"\";\n    this.password = \"\";\n    this.err = \"\";\n    this.login = this.login.bind(this);\n    this.setPassword = this.setPassword.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  setPassword(password) {\n    console.log(\"Setpassword --- \" + this.password);\n    this.password = password;\n  }\n\n  logout() {\n    console.log(\"Logging out...\");\n    this.authenticated = false;\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/mark/Desktop/School/Subjects/SENG350/spyBot/demoreactapp/client/src/components/auth.js"],"names":["axios","Auth","constructor","login","username","password","post","then","res","data","error","setState","err","console","log","state","localStorage","setItem","token","catch","authenticated","bind","setPassword","logout","isAuthenticated"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,CAAU;AAENC,EAAAA,WAAW,GAAE;AAAA,SAqBbC,KArBa,GAqBL,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAE5B;AAGAL,MAAAA,KAAK,CAACM,IAAN,CAAW,OAAX,EAAoB;AAAEF,QAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,QAAAA,QAAQ,EAAEA;AAAhC,OAApB,EAAgEE,IAAhE,CAAqEC,GAAG,IAAI;AAExE,YAAGA,GAAG,CAACC,IAAJ,CAASC,KAAZ,EAAkB;AAEd,eAAKC,QAAL,CAAc;AAACC,YAAAA,GAAG,EAAEJ,GAAG,CAACC,IAAJ,CAASC;AAAf,WAAd,EAAqC,MAAM;AACvCG,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2B,KAAKC,KAAL,CAAWH,GAAlD;AACH,WAFD;AAIAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWH,GAAvB;AAEH,SARD,MAQK;AACDI,UAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BT,GAAG,CAACC,IAAJ,CAASS,KAAvC;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACH;AAEJ,OAfD,EAeGW,KAfH,CAeSP,GAAG,IAAI,CAEf,CAjBD;AAkBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGQC,MAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH,KApEY;;AAET,SAAKM,aAAL,GAAqB,KAArB;AACA,SAAKhB,QAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKO,GAAL,GAAW,EAAX;AAEA,SAAKT,KAAL,GAAa,KAAKA,KAAL,CAAWkB,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AAEH;;AAIDC,EAAAA,WAAW,CAACjB,QAAD,EAAU;AACjBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAKT,QAAtC;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAoDDkB,EAAAA,MAAM,GAAE;AACJV,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAKM,aAAL,GAAqB,KAArB;AACH;;AAEDI,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKJ,aAAZ;AACH;;AAhFK;;AAmFV,eAAe,IAAInB,IAAJ,EAAf","sourcesContent":["import axios from 'axios';\n\nclass Auth{\n\n    constructor(){\n\n        this.authenticated = false\n        this.username= \"\"\n        this.password = \"\"\n        this.err = \"\"\n\n        this.login = this.login.bind(this)\n        this.setPassword = this.setPassword.bind(this)\n        this.logout = this.logout.bind(this)\n        this.isAuthenticated = this.isAuthenticated.bind(this)\n\n    }\n\n\n\n    setPassword(password){\n        console.log(\"Setpassword --- \" + this.password)\n        this.password = password\n    }\n\n    login = (username, password) => {\n\n        //this.setState({username: username, password: password})\n\n\n        axios.post(\"login\", { username: username, password: password }).then(res => {\n            \n            if(res.data.error){\n\n                this.setState({err: res.data.error}, () => {\n                    console.log(\"There is an error --> \" + this.state.err);\n                })\n\n                console.log(this.state.err);\n\n            }else{\n                localStorage.setItem(\"token\", res.data.token)\n                console.log(res);\n            }\n\n        }).catch(err => {\n            \n        })\n        /*\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({password : this.password})\n        };\n        try {\n            const response = await fetch('http://localhost:3002/login', requestOptions)\n            const data = await response.json()\n            if (data.outcome === 'match') {\n                this.authenticated = true\n            }\n            else if (data.outcome === 'no match') {\n\n                this.authenticated = false\n            }\n        }\n        catch (error) {\n            return (console.log(\"Error with the authentication : \" + error))\n        }\n        */\n\n        console.log(\"We have run the log in function \")\n    }\n\n\n    logout(){\n        console.log(\"Logging out...\")\n        this.authenticated = false\n    }\n\n    isAuthenticated(){\n        return this.authenticated\n    }\n}\n\nexport default new Auth();"]},"metadata":{},"sourceType":"module"}