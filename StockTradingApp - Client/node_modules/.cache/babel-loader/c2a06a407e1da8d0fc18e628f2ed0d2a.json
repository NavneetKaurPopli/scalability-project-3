{"ast":null,"code":"import axios from 'axios';\n\nclass Transaction {\n  constructor() {\n    this.init = () => {\n      this.token = localStorage.getItem(\"token\");\n      let headers = {\n        Accept: \"application/json\"\n      };\n\n      if (this.api_token) {\n        headers.Authorization = `Bearer ${this.token}`;\n      }\n\n      this.client = axios.create({\n        baseURL: this.api_url,\n        timeout: 31000,\n        headers: headers\n      });\n      return this.client;\n    };\n\n    this.add = (userid, amount) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"add\", {\n          userid: userid,\n          amount: amount\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              data: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.quote = (userid, stockSymbol) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"quote\", {\n          userid: userid,\n          stockSymbol: stockSymbol\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              authenticated: true,\n              data: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.buy = (userid, stockSymbol, amount) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"buy\", {\n          userid: userid,\n          stockSymbol: stockSymbol,\n          amount: amount\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              authenticated: true,\n              data: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.commitBuy = userid => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"commitbuy\", {\n          userid: userid\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              authenticated: true,\n              message: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.cancelBuy = userid => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"cancelbuy\", {\n          userid: userid\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              authenticated: true,\n              message: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.sell = (userid, stockSymbol, amount) => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"sell\", {\n          userid: userid,\n          stockSymbol: stockSymbol,\n          amount: amount\n        }).then(res => {\n          if (res.data.error) {\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            resolve({\n              authenticated: true,\n              message: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err);\n          reject();\n        });\n        console.log(\"We have run the add function \");\n      });\n    };\n\n    this.commitSell = userId => {\n      return new Promise((resolve, reject) => {\n        axios.post(\"commitsell\", {\n          userId: userId\n        }).then(res => {\n          if (res.data.error) {\n            this.err = res.data.error;\n            resolve({\n              authenticated: false,\n              error: res.data.error\n            });\n          } else {\n            this.authenticated = true;\n            this.token = res.data.token;\n            this.user = res.data.user;\n            localStorage.setItem(\"token\", res.data.token);\n            console.log(res);\n            resolve({\n              authenticated: true,\n              message: res.data\n            });\n          }\n        }).catch(err => {\n          console.log(err.data);\n          reject();\n        });\n        console.log(\"We have run the log in function \");\n      });\n    };\n\n    this.stockname = \"\";\n    this.userid = \"\";\n    this.token = \"\";\n    this.amount = \"\";\n    this.init = this.init.bind(this);\n    this.add = this.add.bind(this);\n    this.quote = this.quote.bind(this);\n    this.buy = this.buy.bind(this);\n  }\n\n}\n\nexport default new Transaction();","map":{"version":3,"sources":["/Users/mark/Desktop/Projects/StockTradingApp/StockTradingApp - Client/src/Helper/transaction.js"],"names":["axios","Transaction","constructor","init","token","localStorage","getItem","headers","Accept","api_token","Authorization","client","create","baseURL","api_url","timeout","add","userid","amount","Promise","resolve","reject","post","then","res","data","error","catch","err","console","log","quote","stockSymbol","authenticated","buy","commitBuy","message","cancelBuy","sell","commitSell","userId","user","setItem","stockname","bind"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\n\n\nclass Transaction{\n\n    constructor(){\n\n\n        this.stockname = \"\";\n        this.userid = \"\";\n        this.token = \"\";\n        this.amount = \"\";\n\n\n        this.init = this.init.bind(this)\n        this.add = this.add.bind(this)\n        this.quote = this.quote.bind(this)\n        this.buy = this.buy.bind(this)\n\n    }\n\n    init = () => {\n\n        this.token = localStorage.getItem(\"token\")\n\n        let headers = {\n            Accept: \"application/json\",\n        };\n\n        if (this.api_token) {\n            headers.Authorization = `Bearer ${this.token}`;\n        }\n\n        this.client = axios.create({\n            baseURL: this.api_url,\n            timeout: 31000,\n            headers: headers,\n        });\n\n        return this.client\n\n    }\n\n    add = (userid, amount) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"add\", { userid: userid, amount: amount }).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        data: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    quote = (userid, stockSymbol) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"quote\", { userid: userid, stockSymbol: stockSymbol }).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        authenticated: true,\n                        data: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    buy = (userid, stockSymbol, amount) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"buy\", { userid: userid, stockSymbol: stockSymbol, amount: amount }).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        authenticated: true,\n                        data: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    commitBuy = (userid) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"commitbuy\", { userid: userid}).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        authenticated: true,\n                        message: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    cancelBuy = (userid) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"cancelbuy\", { userid: userid }).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        authenticated: true,\n                        message: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    sell = (userid, stockSymbol, amount) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"sell\", { userid: userid, stockSymbol: stockSymbol, amount: amount }).then( res => {\n            \n                if(res.data.error){\n\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    resolve({\n                        authenticated: true,\n                        message: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err)\n                reject()\n            })\n    \n            console.log(\"We have run the add function \")\n\n        })\n        \n    }\n\n    commitSell = (userId) => {\n\n        return new Promise((resolve, reject) => {\n\n            axios.post(\"commitsell\", { userId: userId }).then( res => {\n            \n                if(res.data.error){\n\n                    this.err = res.data.error\n                    resolve({\n                        authenticated: false,\n                        error: res.data.error\n                    })\n    \n                }\n                else{\n    \n                    this.authenticated = true;\n                    this.token = res.data.token;\n                    this.user = res.data.user;\n\n                    localStorage.setItem(\"token\", res.data.token);\n\n                    console.log(res);\n                    resolve({\n                        authenticated: true,\n                        message: res.data\n                    })\n\n                }\n    \n            }).catch(err => {\n                console.log(err.data)\n                reject()\n            })\n    \n            console.log(\"We have run the log in function \")\n\n        })\n        \n    }\n\n}\n\nexport default new Transaction();"]},"metadata":{},"sourceType":"module"}