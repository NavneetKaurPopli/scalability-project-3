{"ast":null,"code":"import axios from 'axios';\n\nclass Auth {\n  constructor() {\n    this.authenticated = false;\n    this.username = \"\";\n    this.password = \"\";\n    this.err = \"\";\n    this.login = this.login.bind(this);\n    this.setPassword = this.setPassword.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  setPassword(password) {\n    console.log(\"Setpassword --- \" + this.password);\n    this.password = password;\n  }\n\n  async login(username, password) {\n    //this.setState({username: username, password: password})\n    axios.post(\"login\", {\n      username: username,\n      password: password\n    }).then(res => {\n      if (res.data.error) {\n        this.setState({\n          err: res.data.error\n        }, () => {\n          console.log(\"There is an error --> \" + this.state.err);\n        });\n        console.log(\"The error is \" + this.state.err);\n      } else {\n        localStorage.setItem(\"token\", res.data.token);\n        console.log(res);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n    /*\n    \n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({password : this.password})\n    };\n    try {\n        const response = await fetch('http://localhost:3002/login', requestOptions)\n        const data = await response.json()\n        if (data.outcome === 'match') {\n            this.authenticated = true\n        }\n        else if (data.outcome === 'no match') {\n             this.authenticated = false\n        }\n    }\n    catch (error) {\n        return (console.log(\"Error with the authentication : \" + error))\n    }\n    */\n\n    console.log(\"We have run the log in function \");\n  }\n\n  logout() {\n    console.log(\"Logging out...\");\n    this.authenticated = false;\n  }\n\n  isAuthenticated() {\n    return this.authenticated;\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Users/mark/Desktop/School/Subjects/SENG350/spyBot/demoreactapp/client/src/components/auth.js"],"names":["axios","Auth","constructor","authenticated","username","password","err","login","bind","setPassword","logout","isAuthenticated","console","log","post","then","res","data","error","setState","state","localStorage","setItem","token","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,CAAU;AAENC,EAAAA,WAAW,GAAE;AAET,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,QAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,GAAL,GAAW,EAAX;AAEA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,MAAL,GAAc,KAAKA,MAAL,CAAYF,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AAEH;;AAIDC,EAAAA,WAAW,CAACJ,QAAD,EAAU;AACjBO,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAKR,QAAtC;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEW,QAALE,KAAK,CAAEH,QAAF,EAAYC,QAAZ,EAAqB;AAE7B;AAGAL,IAAAA,KAAK,CAACc,IAAN,CAAW,OAAX,EAAoB;AAAEV,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,MAAAA,QAAQ,EAAEA;AAAhC,KAApB,EAAgEU,IAAhE,CAAsEC,GAAG,IAAI;AAEzE,UAAGA,GAAG,CAACC,IAAJ,CAASC,KAAZ,EAAkB;AAEd,aAAKC,QAAL,CAAc;AAACb,UAAAA,GAAG,EAAEU,GAAG,CAACC,IAAJ,CAASC;AAAf,SAAd,EAAqC,MAAM;AACvCN,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2B,KAAKO,KAAL,CAAWd,GAAlD;AACH,SAFD;AAIAM,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB,KAAKO,KAAL,CAAWd,GAAzC;AAEH,OARD,MAQK;AACDe,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,GAAG,CAACC,IAAJ,CAASM,KAAvC;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACH;AAEJ,KAfD,EAeGQ,KAfH,CAeSlB,GAAG,IAAI;AACZM,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,KAjBD;AAkBA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGQM,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;;AAGDH,EAAAA,MAAM,GAAE;AACJE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,SAAKV,aAAL,GAAqB,KAArB;AACH;;AAEDQ,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKR,aAAZ;AACH;;AAhFK;;AAmFV,eAAe,IAAIF,IAAJ,EAAf","sourcesContent":["import axios from 'axios';\n\nclass Auth{\n\n    constructor(){\n\n        this.authenticated = false\n        this.username= \"\"\n        this.password = \"\"\n        this.err = \"\"\n\n        this.login = this.login.bind(this)\n        this.setPassword = this.setPassword.bind(this)\n        this.logout = this.logout.bind(this)\n        this.isAuthenticated = this.isAuthenticated.bind(this)\n\n    }\n\n\n\n    setPassword(password){\n        console.log(\"Setpassword --- \" + this.password)\n        this.password = password\n    }\n\n     async login (username, password){\n\n        //this.setState({username: username, password: password})\n\n\n        axios.post(\"login\", { username: username, password: password }).then( res => {\n            \n            if(res.data.error){\n\n                this.setState({err: res.data.error}, () => {\n                    console.log(\"There is an error --> \" + this.state.err);\n                })\n\n                console.log(\"The error is \" + this.state.err);\n\n            }else{\n                localStorage.setItem(\"token\", res.data.token)\n                console.log(res);\n            }\n\n        }).catch(err => {\n            console.log(err)\n        })\n        /*\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({password : this.password})\n        };\n        try {\n            const response = await fetch('http://localhost:3002/login', requestOptions)\n            const data = await response.json()\n            if (data.outcome === 'match') {\n                this.authenticated = true\n            }\n            else if (data.outcome === 'no match') {\n\n                this.authenticated = false\n            }\n        }\n        catch (error) {\n            return (console.log(\"Error with the authentication : \" + error))\n        }\n        */\n\n        console.log(\"We have run the log in function \")\n    }\n\n\n    logout(){\n        console.log(\"Logging out...\")\n        this.authenticated = false\n    }\n\n    isAuthenticated(){\n        return this.authenticated\n    }\n}\n\nexport default new Auth();"]},"metadata":{},"sourceType":"module"}